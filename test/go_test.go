package test

/**
go 언어는 테스트 코드 작성과 실행을 언어 자체적으로 지원해줌
테스트 코드를 작성할 때는 3가지의 표현 규약에 따라 테스트 코드를 작성해야하고
테스트 코드를 수행할 때는 go test 명령으로 테스트 코드를 실행한다

테스트 코드 작성 시의 3가지 표현 규약
1. 파일 명이 _test.go 로 끝나야 함
	> 테스트 코드는 파일명이 _test.go 로 끝나는 파일 안에 존재해야 함
3. testing 패키지를 임포트 받아야 함
	> 테스트 코드를 작성하기 위해서는 testing 패키지를 가져오고 여기에서 제공하는걸 사용해야 함
3. 테스트 코드는 func Test~~~(t *testing.T)
	> 테스트 코드들은 모두 함수로 묶여있어야 하고, 함수명은 반드시 Test 로 시작해야 함
	> Test 이후에 ~~~ 로 해둔 부분은 반드시 대문자로 나와야 함 ex) TestOrderInfo
	> 테스트 함수의 매개변수는 t *testing.T 반드시 이거 하나만 있어야 함

정말 간단한 테스트를 goTest1.go, goTest1_test.go 에서 TestGoTest1,3  를 통해서 확인


테스트 코드를 작성하는데 도움을 줄 수 있는 패키지도 존재함 > stretchr/testify
해당 패키지는 테스트하고 테스트 실패를 알릴 수 있는 다양한 함수를 제공함(외부꺼임)

terminal 에다가 오른쪽 명령어를 사용 > go get github.com/stretchr/testify
설치완료했으면 이걸로 새롭게 테스트를 만들어보자 goTest1_test.go 에서 TestGoTestTestify 를 통해서 확인
약간 써보니까 junit 쓰는거랑 비슷한듯 메소드명도 비슷하고
여기서 제공하는 메소드들 보면
Equal(), Greater(), Len(), NotNilf(), NotEqualf()
이렇게 얼추 내가 사용했던 것들이랑 비슷한느낌이다
더 좋은 점은 에러메세지를 함수에서 받아주는게 포인또

testify 에서는 이거 이외에도 mock, suite 패키지를 제공함
mock 은 이름 그대로 모킹 기능을 제공해줌
suite 은 조금 어색하긴한데 테스트 준비작업이나 테스트 종료 후 뒤처리작업을 제공해줌
예를 들면 테스트 수행 시, 특정 파일이 있어야 수행되는 테스트에서 그 특정파일을 테스트 시작 시 생성해주고, 테스트 종료시 없애주고 요론것들



TDD
테스트의 중요성은 정말 입이 아프다.. 뼈저리게 체감도 되구
여기선 테스트의 구분에 대해서 설명해줘서 작성해봄 > 크게 블랙박스 테스트, 화이트박스 테스트로 구분됨
블랙박스 테스트
> 제품을 열지 않고 진행되는 테스트, 그 의미는 사용자입장에서 테스트를 수행 - QA 에서 테스트하는거랑 똑같은 방식, 어떻게보면 api 기반으로 수행하는 bdd 가 딱 여기

화이트박스 테스트
> 실제로 소스코드 내부에서 진행되는 테스트, 직접 메소드 같은 걸 불러서 테스트를 수동으로 수행하는 방식

결국 TDD 란
테스트 코드를 먼저 작성하고 > 소스코드를 작성하고 > 테스트를 지속적으로 수행하면서 소스코드를 작성 및 수정 > 테스트 케이스를 늘려가면서 코드를 작성 > 테스트 통과하면 끝
*/
